language: cpp

addons:
  apt:
    sources:
      - llvm-toolchain-trusty-3.8
      - ubuntu-toolchain-r-test
    packages:
      - clang-3.8
      - g++-5
      - lcov
      - valgrind

cache:
  ccache: true

matrix:
  include:

    # Linux clang
    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug VALGRIND=true SANITIZE='' CMAKE_GENERATOR="Unix Makefiles"
      compiler: clang

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug VALGRIND=false SANITIZE=undefined CMAKE_GENERATOR="Unix Makefiles"
      compiler: clang

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug VALGRIND=false SANITIZE=address CMAKE_GENERATOR="Unix Makefiles"
      compiler: clang

    - os: linux
      sudo: false
      env: BUILD_TYPE=Release VALGRIND=false SANITIZE='' CMAKE_GENERATOR="Unix Makefiles"
      compiler: clang

    # Linux gcc
    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug VALGRIND=true SANITIZE='' CMAKE_GENERATOR="Unix Makefiles"
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug VALGRIND=false SANITIZE=undefined CMAKE_GENERATOR="Unix Makefiles"
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug VALGRIND=false SANITIZE=address CMAKE_GENERATOR="Unix Makefiles"
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Release VALGRIND=false SANITIZE='' CMAKE_GENERATOR="Unix Makefiles"
      compiler: gcc

    # OSX clang
    - os: osx
      osx_image: xcode8
      env: BUILD_TYPE=Debug VALGRIND=true SANITIZE='' CMAKE_GENERATOR="Xcode"
      compiler: clang

    - os: osx
      osx_image: xcode8
      env: BUILD_TYPE=Release VALGRIND=false SANITIZE='' CMAKE_GENERATOR="Xcode"
      compiler: clang

    # Code coverage
    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug CMAKE_GENERATOR="Unix Makefiles" ENABLE_COVERAGE=1
      compiler: gcc

    # Conan
    - os: linux
      sudo: required
      language: python
      python: "3.6"
      if: branch = master
      env: CC=clang CXX=clang++
      install:
        - pip install conan
      script:
        - conan create . morwenn/stable
      after_success:
        - conan remote add bintray https://api.bintray.com/conan/morwenn/cpp-sort
        - conan user -r bintray -p ${CONAN_PASSWORD} morwenn
        - conan upload --all -r bintray cpp-sort/1.0.0@morwenn/stable

before_install:
  - if [ `uname` = 'Darwin' ]; then
        brew update &&
        brew install ccache valgrind &&
        export PATH="/usr/local/opt/ccache/libexec:$PATH";
    fi

install:
  - if [ "$CXX" = "g++" ]; then export CXX="g++-5"; fi
  - if [ "$CXX" = "clang++" ]; then export CXX="clang++-3.8"; fi

script:
  - cmake -H. -Bbuild
          -DCMAKE_CONFIGURATION_TYPES="${BUILD_TYPE}"
          -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"
          -DSANITIZE="${SANITIZE}"
          -DUSE_VALGRIND=${VALGRIND}
          -DENABLE_COVERAGE=${ENABLE_COVERAGE}
          -G"${CMAKE_GENERATOR}"
  - if [ `uname` = 'Darwin' ]; then
        cmake --build build --config ${BUILD_TYPE} -- -jobs 2;
    else
        cmake --build build --config ${BUILD_TYPE} -- -j2;
    fi
  - cd build/testsuite
  - travis_wait ctest -C ${BUILD_TYPE} --output-on-failure

after_success:
  - if [ "$ENABLE_COVERAGE" = 1 ]; then
        make gcov;
        make lcov;
        bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports";
    fi

notifications:
  email: false
